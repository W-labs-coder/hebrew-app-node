{% comment %}
  This extension controls RTL/LTR direction, Buy Now text, theme font, and footer banners.
{% endcomment %}

{% assign buyNowText = shop.metafields.custom.buy_now_button_text.value | default: 'Buy Now' %}
{% assign alternativeFont = shop.metafields.custom.font.value | default: "'Arial', sans-serif" %}
{% assign enableFooterBanners = block.settings.enable_footer_banners %}
{% assign payment_background_color = shop.metafields.custom.payment_background_color %}
{% assign payment_background = shop.metafields.custom.payment_background | default: 'transparent' %}
{% assign whatsapp_phone = shop.metafields.custom.whatsapp_number.value %}
{% assign whatsapp_position = shop.metafields.custom.whatsapp_position.value | default: 'right' %}
{% assign whatsapp_style = shop.metafields.custom.whatsapp_style.value | default: 'text_and_icon' %}
{% assign whatsapp_text = shop.metafields.custom.whatsapp_text.value %}
{% assign whatsapp_bg_color = shop.metafields.custom.whatsapp_bg_color.value | default: '#25D366' %}
{% assign whatsapp_text_color = shop.metafields.custom.whatsapp_text_color.value | default: '#FFFFFF' %}
{% assign whatsapp_icon_color = shop.metafields.custom.whatsapp_icon_color.value | default: '#FFFFFF' %}
{% assign button_label = shop.metafields.custom.whatsapp_button_label.value | default: 'Contact Us' %}

{% assign whatsapp_icon_position = shop.metafields.custom.whatsapp_icon_position %}
{% assign whatsapp_icon_style = shop.metafields.custom.whatsapp_icon_style %}
{% assign whatsapp_welcome_message = shop.metafields.custom.whatsapp_welcome_message %}

{% assign enable_welcome_message = shop.metafields.custom.whatsapp_welcome_enabled.value | default: false %}
{% assign welcome_message = shop.metafields.custom.whatsapp_welcome_message.value | default: "היי! איך אפשר לעזור היום?" %}
{% assign message_frequency = shop.metafields.custom.whatsapp_message_frequency.value | default: 1 %}
{% assign message_delay = shop.metafields.custom.whatsapp_message_delay.value | default: 0 %}
{% assign enable_default_message = shop.metafields.custom.whatsapp_default_enabled.value | default: false %}
{% assign default_message = shop.metafields.custom.whatsapp_default_message.value | default: '' %}

{% assign whatsapp_widget_enabled = shop.metafields.custom.whatsapp_widget_enabled.value | default: false %}
{% assign whatsapp_title_bg_color = shop.metafields.custom.whatsapp_title_bg_color.value | default: '#05B457' %}
{% assign whatsapp_title_text_color = shop.metafields.custom.whatsapp_title_text_color.value | default: '#FFFFFF' %}

{%- capture payment_processor_images -%}
  {%- for processor in shop.metafields.custom.payment_processors.value -%}
    {%- assign image_name = processor | downcase | replace: ' ', '_' | append: '.png' -%}
    <img src="{{ image_name | asset_url }}" alt="{{ processor }}">
  {%- endfor -%}
{%- endcapture -%}

{%- capture payment_features_images -%}
  {%- for feature in shop.metafields.custom.payment_features.value -%}
    {%- assign image_name = feature | downcase | replace: ' ', '-' | append: '-svg.svg' -%}
    <img src="{{ image_name | asset_url }}" alt="{{ feature }}">
  {%- endfor -%}
{%- endcapture -%}

{%- capture selected_calendars -%}
  {%- for calendar in shop.metafields.custom.selected_calendars.value -%}
    {%- assign image_name = calendar | downcase | replace: ' ', '-' -%}
    {%- assign image_path = image_name | append: '-icon-svg.svg' -%}
    {%- assign asset_url = image_path | asset_url -%}
    {%- if asset_url != blank -%}
      <img src="{{ asset_url }}" alt="{{ calendar }}">
    {%- endif -%}
 {%- endfor -%}
{%- endcapture -%}

{%- assign default_avatar = 'https://via.placeholder.com/48' -%}
{%- assign user_avatar_url = 'user-avatar.png' | asset_url -%}
{%- if user_avatar_url != blank -%}
  {%- assign default_avatar = user_avatar_url -%}
{%- endif -%}

{%- comment -%} filepath: /Users/emmy/projects/bles/labs/the-hebrew-app-react-node/web/snippets/whatsapp-widget.liquid {%- endcomment -%}

{% comment %} First, ensure we're getting the contacts data {% endcomment %}
{% assign contacts = shop.metafields.custom.contacts.value | default: '[]' | parse_json %}

{% if block.settings.enable_whatsapp %}
  {% if whatsapp_widget_enabled and contacts.size > 0 %}
    <div class="whatsapp-floating-widget" style="position: fixed; {{ whatsapp_position }}: 20px; bottom: 20px; z-index: 999999;">
      <div class="whatsapp-widget-container" data-state="expanded">
        <!-- Widget Header -->
        <div class="whatsapp-widget-header" style="background-color: {{ whatsapp_title_bg_color }};">
          <div class="whatsapp-widget-controls">
            <div class="whatsapp-minimize-button" aria-label="Minimize widget" style="color: {{ whatsapp_title_text_color }}">
              <svg width="12" height="12" viewBox="0 0 12 12">
                <path stroke="{{ whatsapp_title_text_color }}" d="M2 6l4 4 4-4" stroke-width="2" fill="none"/>
              </svg>
            </div>
            <div class="whatsapp-close-button" aria-label="Close widget" style="color: {{ whatsapp_title_text_color }}">
              <svg width="12" height="12" viewBox="0 0 12 12">
                <path stroke="{{ whatsapp_title_text_color }}" d="M1 1l10 10m0-10L1 11" stroke-width="2" fill="none"/>
              </svg>
            </div>
          </div>
          <div class="whatsapp-header-content" style="color: {{ whatsapp_title_text_color }};">
            <h2>!היי</h2>
            <p>.אנחנו כאן כדי לעזור. שוחח איתנו בווטסאפ לכל שאלה</p>
          </div>
        </div>
        <div class="whatsapp-widget-body">
          {% for contact in contacts %}
            <div class="whatsapp-contact" 
                 onclick="openWhatsApp('{{ contact.phone }}', '{{ contact.default_message }}')" 
                 style="cursor: pointer;">
              <div class="whatsapp-avatar">
                {% if contact.avatar_url %}
                  <img src="{{ contact.avatar_url }}" alt="{{ contact.name }}">
                {% else %}
                  <img src="{{ default_avatar }}" alt="{{ contact.name }}">
                {% endif %}
              </div>
              <div class="whatsapp-contact-info">
                <span class="contact-name">{{ contact.name }}</span>
                {% if contact.role %}
                  <span class="contact-role">{{ contact.role }}</span>
                {% endif %}
                <span class="contact-status">צ'אט איתנו</span>
              </div>
              {% if contact.available_hours %}
                <div class="contact-hours">{{ contact.available_hours }}</div>
              {% endif %}
            </div>
          {% endfor %}
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        console.log('WhatsApp Widget Debug:', {
          contacts: {{ contacts | json }},
          widgetEnabled: {{ whatsapp_widget_enabled | json }},
          widgetElement: document.querySelector('.whatsapp-floating-widget'),
          contactElements: document.querySelectorAll('.whatsapp-contact')
        });
      });
    </script>
  {% endif %}
{% endif %}

  {% if show_simple_button and whatsapp_phone != blank %}
  <div class="whatsapp-widget">
    <a href="javascript:void(0);" 
       onclick="openWhatsApp('{{ whatsapp_phone }}')"
       class="whatsapp-button {{ whatsapp_style }}"
       style="background-color: {{ whatsapp_bg_color }};">
      <div class="whatsapp-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="{{ whatsapp_icon_color }}">
          <path d="M20.4054 3.4875C18.1607 1.2375 15.1714 0 11.9946 0C5.4375 0 0.101786 5.33571 0.101786 11.8929C0.101786 13.9875 0.648214 16.0339 1.68214 17.8393L0 24L6.30536 22.3446C8.04107 23.2929 9.99643 23.7911 11.9893 23.7911H11.9946C18.5464 23.7911 24 18.4554 24 11.8982C24 8.72143 22.65 5.7375 20.4054 3.4875ZM11.9946 21.7875C10.2161 21.7875 8.475 21.3107 6.95357 20.4107L6.59464 20.1964L2.85536 21.1768L3.85179 17.5286L3.61607 17.1536C2.63036 15.5786 2.11071 13.7625 2.11071 11.8929C2.11071 6.44464 6.54643 2.00893 12 2.00893C14.6411 2.00893 17.1214 3.0375 19.0179 4.93929C20.9143 6.84107 21.9964 9.32143 21.9911 11.8982C21.9911 17.3518 17.4429 21.7875 11.9946 21.7875ZM17.4161 14.3839C17.1214 14.2339 15.6589 13.5161 15.3857 13.4143C15.1125 13.3179 14.9143 13.2696 14.7161 13.5589C14.5179 13.8482 13.95 14.5179 13.7732 14.7161C13.5964 14.9196 13.4143 14.9411 13.1196 14.7911C11.3946 13.9286 10.2589 13.2482 9.11786 11.3036C8.80714 10.7839 9.42321 10.8214 9.99643 9.67500C10.0982 9.47679 10.05 9.30536 9.97500 9.15536C9.90000 9.00536 9.30000 7.54286 9.05357 6.95357C8.81250 6.37500 8.56607 6.45536 8.38393 6.44464C8.20714 6.43393 8.00893 6.43393 7.81071 6.43393C7.61250 6.43393 7.29107 6.50893 7.01786 6.79286C6.74464 7.08214 5.97857 7.80000 5.97857 9.26250C5.97857 10.725 7.03393 12.1339 7.18393 12.3321C7.33393 12.5304 9.29464 15.5304 12.2786 16.8214C14.1214 17.6357 14.8607 17.7214 15.8036 17.5821C16.3768 17.4964 17.5607 16.8589 17.8071 16.1732C18.0536 15.4875 18.0536 14.8982 17.9786 14.7696C17.9089 14.6304 17.7107 14.5339 17.4161 14.3839Z"/>
        </svg>
      </div>
      {% if whatsapp_style == 'text_and_icon' %}
        <span style="color: {{ whatsapp_text_color }}; margin-right: 8px;">
          {{ button_label }}
        </span>
      {% endif %}
    </a>
  </div>
{% endif %}

  {% if show_simple_button or whatsapp_phone != blank %}
  <script>
    function initializeWhatsApp(phone) {
      try {
        const currentTime = Date.now();
        const lastMessageTime = localStorage.getItem('lastWhatsAppMessage');
        const timeDifference = lastMessageTime ? 
          (currentTime - parseInt(lastMessageTime)) / (1000 * 60 * 60) : null;
        
        const welcomeEnabled = {{ enable_welcome_message | json }};
        const welcomeMessage = "{{ welcome_message | escape }}";
        const messageFrequency = {{ message_frequency | json }};
        const messageDelay = {{ message_delay | default: 0 | json }};

        const shouldSendWelcome = (
          welcomeEnabled && 
          welcomeMessage && 
          (lastMessageTime === null || timeDifference >= messageFrequency)
        );

        console.log('Debug Values:', {
          welcomeEnabled: Boolean(welcomeEnabled),
          hasWelcomeMessage: Boolean(welcomeMessage),
          lastMessageTime: lastMessageTime,
          currentTime: currentTime,
          timeDifference: timeDifference,
          messageFrequency: messageFrequency,
          isLastMessageNull: lastMessageTime === null,
          shouldSendWelcome
        });

        const defaultEnabled = {{ enable_default_message }};
        const defaultMessage = "{{ default_message | escape }}";
        let initialUrl = `https://wa.me/${phone}`;
        
        if (defaultEnabled && defaultMessage && defaultMessage.trim() !== ' ') {
          initialUrl += `?text=${encodeURIComponent(defaultMessage)}`; 
        }
        window.open(initialUrl, '_blank');

        if (shouldSendWelcome) {
          console.log('Scheduling welcome message with delay:', messageDelay);
          setTimeout(() => {
            try {
              console.log('Attempting to send welcome message...');
              const welcomeUrl = `https://wa.me/${phone}?text=${encodeURIComponent(welcomeMessage)}`;
              console.log('Welcome URL:', welcomeUrl);
              const newWindow = window.open(welcomeUrl, '_blank');
              
              if (newWindow) {
                console.log('Welcome message window opened successfully');
                localStorage.setItem('lastWhatsAppMessage', currentTime.toString());
                console.log('Last message time updated:', currentTime);
              } else {
                console.error('Popup blocker might be preventing the welcome message');
              }
            } catch (error) {
              console.error('Error sending welcome message:', error);
            }
          }, messageDelay);
        } else {
          console.log('Not sending welcome message because conditions not met');
        }
      } catch (error) {
        console.error('WhatsApp open error:', error);
        window.open(`https://wa.me/${phoneNumber || "{{ whatsapp_phone | escape }}"}`, '_blank');
      }
    }
  </script>
{% endif %}
  <style>
    .whatsapp-button {
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: transform 0.3s ease;
      border-radius: 10px;
      padding: 8px 16px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .whatsapp-button:hover {
      transform: scale(1.05);
    }

    .whatsapp-button.text_and_icon {
      min-width: 160px;
    }

    .whatsapp-button.icon {
      width: 60px;
      height: 60px;
      padding: 10px;
      border-radius: 50%;
    }

    .whatsapp-button span {
      font-family: var(--custom-font, 'Rubik'), sans-serif;
      font-size: 14px;
      font-weight: 500;
    }

    .whatsapp-button img {
      filter: brightness(0) invert(1);
    }

  .whatsapp-widget {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  .whatsapp-button {
    display: flex !important;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: transform 0.3s ease;
    border-radius: 10px;
    padding: 8px 16px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    min-width: 160px;
    text-decoration: none;
  }

  .whatsapp-button.icon {
    min-width: auto;
    width: 60px;
    height: 60px;
    padding: 10px;
    border-radius: 50%;
  }

  .whatsapp-button span {
    font-family: var(--custom-font, 'Rubik'), sans-serif;
    font-size: 14px;
    font-weight: 500;
    white-space: nowrap;
  }

  .whatsapp-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
  }

  .whatsapp-button.icon .whatsapp-icon {
    width: 32px;
    height: 32px;
  }

  .whatsapp-icon svg {
    width: 100%;
    height: 100%;
  }

  .whatsapp-button:hover {
    transform: scale(1.05);
  }

  .whatsapp-widget {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    pointer-events: auto !important;
  }

  .whatsapp-widget.icon {
    width: 60px !important;
    height: 60px !important;
  }
  
  .whatsapp-button {
    display: flex !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  /* Hide any duplicate payment feature sections */
  .payment-section:not(.footer-banners .payment-section) {
    display: none !important;
  }
  
  /* Ensure footer banner images are properly sized */
  .footer-banners .image-container img {
    max-width: 50px;
    height: auto;
    margin: 5px;
    display: inline-block;
  }

  .whatsapp-floating-widget {
    position: fixed !important;
    z-index: 999999 !important;
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    pointer-events: auto !important;
    width: 300px;
    max-width: 100%;
  }

  .whatsapp-widget-container {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden;
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  .whatsapp-widget {
    display: flex !important;
    visibility: visible !important;
    opacity: 1 !important;
    pointer-events: auto !important;
  }

  .whatsapp-button {
    display: flex !important;
    visibility: visible !important;
    opacity: 1 !important;
    pointer-events: auto !important;
  }

  .whatsapp-widget-container {
    transition: height 0.3s ease;
    overflow: hidden;
  }

  .whatsapp-widget-container.minimized {
    height: 60px !important;
  }

  .whatsapp-widget-container.minimized .whatsapp-widget-body {
    display: none !important;
  }

  .whatsapp-minimize-button svg {
    transition: transform 0.3s ease;
  }

  .whatsapp-widget-container.minimized .whatsapp-minimize-button svg {
    transform: rotate(180deg);
  }

  .whatsapp-widget-container.hidden {
    display: none !important;
  }

  /* Widget Styles */
.whatsapp-widget-container {
  width: 300px;
  background: white;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  overflow: hidden;
}

.whatsapp-widget-header {
  position: relative;
  padding: 20px;
  border-radius: 10px 10px 0 0;
}

.whatsapp-widget-header h2 {
  margin: 0 0 8px 0;
  font-size: 26px;
  line-height: 31px;
  font-weight: 600;
}

.whatsapp-widget-header p {
  margin: 0;
  font-size: 14px;
  line-height: 21px;
  font-weight: 500;
}

.whatsapp-widget-body {
  padding: 16px;
  background: white;
}

.whatsapp-contact {
  display: flex;
  align-items: center;
  padding: 12px;
  border-radius: 8px;
  transition: background-color 0.3s;
  margin-bottom: 8px;
  background: white;
}

.whatsapp-contact:hover {
  background-color: #f5f5f5;
}

.whatsapp-contact-info{
display:flex; 
flex-direction: column;
}

.whatsapp-header-content {
 
  padding-right: 16px;
}

/* Ensure controls are visible against any background */
.whatsapp-widget-controls {
  display: flex;
  gap: 8px;
  left: 12px;
  top: 12px;
  z-index: 1;
}

.whatsapp-floating-widget {
  max-height: 90vh !important;
  display: flex !important;
}

.whatsapp-widget-container {
  width: 300px;
  max-height: 90vh !important;
  background: white;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  overflow: hidden;
  display: flex !important;
  flex-direction: column !important;
}

.whatsapp-widget-header {
  position: relative;
  padding: 20px;
  border-radius: 10px 10px 0 0;
  flex-shrink: 0; /* Prevent header from shrinking */
}

.whatsapp-widget-body {
  padding: 16px;
  background: white;
  overflow-y: auto; /* Make contacts scrollable */
  flex-grow: 1; /* Allow body to take remaining space */
  max-height: calc(90vh - 120px); /* Account for header height */
}

/* Add smooth scrolling to the contacts area */
.whatsapp-widget-body::-webkit-scrollbar {
  width: 6px;
}

.whatsapp-widget-body::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.whatsapp-widget-body::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 3px;
}

.whatsapp-widget-body::-webkit-scrollbar-thumb:hover {
  background: #666;
}
</style>

<link href="https://fonts.googleapis.com/css2?family=Alef:wght@400;700&family=Amatic+SC:wght@400;700&family=Arimo:wght@400;700&family=Assistant:wght@200;300;400;500;600;700;800&family=Bellefair&family=Bona+Nova:ital,wght@0,400;0,700;1,400&family=Cousine:ital,wght@0,400;0,700;1,400;1,700&family=David+Libre:wght@400;500;700&family=Frank+Ruhl+Libre:wght@300;400;500;700;900&family=Fredoka:wght@300;400;500;600;700&family=Heebo:wght@100;200;300;400;500;600;700;800;900&family=IBM+Plex+Sans+Hebrew:wght@100;200;300;400;500;600;700&family=Karantina:wght@300;400;700&family=Miriam+Libre:wght@400;700&family=Noto+Rashi+Hebrew:wght@200;300;400;500;600;700;800;900&family=Noto+Sans+Hebrew:wght@100;200;300;400;500;600;700;800;900&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Rubik:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900&family=Secular+One&family=Suez+One&family=Tinos:ital,wght@0,400;0,700;1,400;1,700&family=Varela+Round&display=swap" rel="stylesheet">

<script>
// Add near the top of your scripts
console.log('RTL Control Script Loading:', {
  timestamp: new Date().toISOString(),
  whatsappEnabled: {{ block.settings.enable_whatsapp | json }},
  widgetEnabled: {{ whatsapp_widget_enabled | json }},
  rtlEnabled: {{ block.settings.enable_rtl | json }}
});

function setRTL(isRTL) {
  const htmlElement = document.documentElement;
  const bodyElement = document.body;
  
  if (isRTL) {
    htmlElement.setAttribute('dir', 'rtl');
    htmlElement.setAttribute('lang', 'he');
    bodyElement.setAttribute('dir', 'rtl');
    bodyElement.style.direction = 'rtl';
    document.body.classList.add('rtl-enabled');
  } else {
    htmlElement.setAttribute('dir', 'ltr');
    htmlElement.setAttribute('lang', 'en');
    bodyElement.setAttribute('dir', 'ltr');
    bodyElement.style.direction = 'ltr';
    document.body.classList.remove('rtl-enabled');
  }
  
  console.log('RTL State:', {
    isRTL: isRTL,
    htmlDir: htmlElement.getAttribute('dir'),
    bodyDir: bodyElement.getAttribute('dir'),
    bodyStyle: bodyElement.style.direction
  });
}

function updateBuyNowText() {
  if (window.enableBuyNowText && window.buyNowText) {
    const buttons = document.querySelectorAll('.shopify-payment-button__button');
    buttons.forEach(button => {
      if (button) {
        button.textContent = window.buyNowText;
      }
    });
    
    const dynamicButtons = document.querySelectorAll('.shopify-payment-button__more-options');
    dynamicButtons.forEach(button => {
      if (button) {
        button.textContent = window.buyNowText;
      }
    });
  }
}

function displayFooterBanners() {
  // Debug settings
  console.log("Footer Banners Settings:", {
    enabled: window.enableFooterBanners,
    shippingOption: {{ shop.metafields.custom.shipping_option.value | json }},
    warrantyDays: {{ shop.metafields.custom.warranty_days.value | json }},
    paymentProcessorImages: {{ payment_processor_images | json }},
    paymentFeatureImages: {{ payment_features_images | json }}
  });

  // Early return if disabled
  if (!window.enableFooterBanners) {
    console.log("Footer banners disabled");
    return;
  }

  // Find footer element
  const footer = document.querySelector('footer');
  if (!footer) {
    console.error("Footer not found");
    return;
  }

  // Remove existing banner if present
  const existingBanner = document.querySelector('.footer-banners');
  if (existingBanner) {
    existingBanner.remove();
  }

  // Create footer banner container
  const footerBanner = document.createElement('div');
  footerBanner.classList.add('footer-banners');
  
  // Build banner content with proper Liquid syntax
  footerBanner.innerHTML = `
    <div class="footer-banner-content">
      {% if payment_processor_images != blank %}
        <div class="payment-processors">
          <h4>אמצעי תשלום</h4>
          <div class="image-container">
            {{ payment_processor_images }}
          </div>
        </div>
      {% endif %}
      
      {% if payment_features_images != blank and block.settings.enable_footer_banners %}
        <div class="payment-features">
          <div class="image-container">
            {{ payment_features_images }}
          </div>
        </div>
      {% endif %}
      
      <div class="shipping-warranty">
        {% if shop.metafields.custom.shipping_option.value != blank %}
          <p>משלוח: {{ shop.metafields.custom.shipping_option.value }}</p>
        {% endif %}
        {% if shop.metafields.custom.warranty_days.value != blank %}
          <p>אחריות: {{ shop.metafields.custom.warranty_days.value }} ימים</p>
        {% endif %}
      </div>
    </div>
  `;

  // Add styles
  const styles = `
    <style>
      .footer-banners {
        width: 100%;
        padding: 20px;
        margin-top: 20px;
        text-align: center;
        background: transparent;
      }
      
      .footer-banner-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        gap: 20px;
      }
      
      .payment-processors h4 {
        margin-bottom: 10px;
        font-weight: 600;
      }
      
      .image-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
        margin: 10px 0;
      }
      
      .image-container img {
        max-width: 50px;
        height: auto;
        margin: 5px;
      }
      
      .shipping-warranty {
        font-weight: 500;
        margin-top: 10px;
      }
      
      .shipping-warranty p {
        margin: 5px 0;
      }
    </style>
  `;
  
  // Insert styles and banner
  footerBanner.insertAdjacentHTML('beforeend', styles);
  footer.insertAdjacentElement('afterbegin', footerBanner);
  
  console.log("Footer banner added successfully");
}

// Main initialization
document.addEventListener('DOMContentLoaded', function () {
  // Set global variables
  window.buyNowText = {{ buyNowText | json }};
  window.alternativeFont = {{ alternativeFont | json }};
  window.enableBuyNowText = {{ block.settings.enable_buy_now_text }};
  window.enableAlternativeFont = {{ block.settings.enable_alternative_font }};
  window.enableFooterBanners = {{ enableFooterBanners | json }};
  window.enableWhatsApp = {{ block.settings.enable_whatsapp }};

  // Initialize features
  setRTL({{ block.settings.enable_rtl }});
  updateBuyNowText();
  displayFooterBanners();

  // Add mutation observer
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.addedNodes.length) {
        updateBuyNowText();
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true
  });

  // Listen for Shopify Theme Editor changes
  document.addEventListener('shopify:block:select', function(event) {
    if (event.detail.blockId === {{ block.id | json }}) {
      setRTL({{ block.settings.enable_rtl }});
      updateBuyNowText();
      displayFooterBanners();
    }
  });

  // Debug logging
  console.log('Features Initialized:', {
    rtlEnabled: {{ block.settings.enable_rtl }},
    buyNowTextEnabled: window.enableBuyNowText,
    footerBannersEnabled: window.enableFooterBanners,
    currentDirection: document.documentElement.getAttribute('dir')
  });
});
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    (function () {
      const htmlElement = document.documentElement;
      const bodyElement = document.body;
      const buyNowText = {{ buyNowText | json }};
      const alternativeFont = {{ alternativeFont | json }};
      const enableBuyNowText = {{ block.settings.enable_buy_now_text }};
      const enableAlternativeFont = {{ block.settings.enable_alternative_font }};
      const enableFooterBanners = {{ enableFooterBanners | json }};
      const paymentProcessorImages = {{ payment_processor_images | json }};
      const paymentFeatureImages = {{ payment_features_images | json }};
      const selectedCalendarImage = {{ selected_calendars | json }};
      const shippingOption = {{ shop.metafields.custom.shipping_option.value | json }};
      const warrantyDays = {{ shop.metafields.custom.warranty_days.value | json }};
      const enableWhatsApp = {{ block.settings.enable_whatsapp }};

      function setRTL(isRTL) {
  const htmlElement = document.documentElement;
  const bodyElement = document.body;
  
  if (isRTL) {
    htmlElement.setAttribute('dir', 'rtl');
    htmlElement.setAttribute('lang', 'he');
    bodyElement.setAttribute('dir', 'rtl');
    bodyElement.style.direction = 'rtl';
    document.body.classList.add('rtl-enabled');
  } else {
    htmlElement.setAttribute('dir', 'ltr');
    htmlElement.setAttribute('lang', 'en');
    bodyElement.setAttribute('dir', 'ltr');
    bodyElement.style.direction = 'ltr';
    document.body.classList.remove('rtl-enabled');
  }
  
  console.log('RTL State:', {
    isRTL: isRTL,
    htmlDir: htmlElement.getAttribute('dir'),
    bodyDir: bodyElement.getAttribute('dir'),
    bodyStyle: bodyElement.style.direction
  });
}


     function updateBuyNowText() {
  if (enableBuyNowText && buyNowText) {
    const buttons = document.querySelectorAll('.shopify-payment-button__button');
    buttons.forEach(button => {
      if (button) {
        const originalText = button.textContent;
        button.textContent = buyNowText;
        console.log('Buy Now Text Updated:', {
          originalText: originalText,
          newText: buyNowText,
          element: button
        });
      }
    });
    
    // Also update dynamic checkout buttons
    const dynamicButtons = document.querySelectorAll('.shopify-payment-button__more-options');
    dynamicButtons.forEach(button => {
      if (button) {
        button.textContent = buyNowText;
      }
    });
  }
}


      function setAlternativeFont(enable) {
        if (enable && alternativeFont) {
          document.documentElement.style.setProperty('--custom-font', alternativeFont);
          document.body.classList.add('custom-font-applied');
          
          // Apply font to all elements
          const allElements = document.getElementsByTagName('*');
          for (let i = 0; i < allElements.length; i++) {
            if (!allElements[i].classList.contains('fa') && 
                !allElements[i].classList.contains('fas') && 
                !allElements[i].classList.contains('far') && 
                !allElements[i].classList.contains('fal') && 
                !allElements[i].classList.contains('fab')) {
              allElements[i].style.fontFamily = `var(--custom-font, 'Rubik'), sans-serif`;
            }
          }
          
          // Force a reflow to ensure the font is applied
          document.body.style.display = 'none';
          document.body.offsetHeight; // Trigger a reflow
          document.body.style.display = '';
        } else {
          document.documentElement.style.setProperty('--custom-font', '');
          document.body.classList.remove('custom-font-applied');
          
          // Remove inline font-family style from all elements
          const allElements = document.getElementsByTagName('*');
          for (let i = 0; i < allElements.length; i++) {
            allElements[i].style.removeProperty('font-family');
          }
        }
      }

    function displayFooterBanners() {
  // Debug settings
  console.log("Footer Banners Settings:", {
    enabled: window.enableFooterBanners,
    shippingOption: {{ shop.metafields.custom.shipping_option.value | json }},
    warrantyDays: {{ shop.metafields.custom.warranty_days.value | json }},
    paymentProcessorImages: {{ payment_processor_images | json }},
    paymentFeatureImages: {{ payment_features_images | json }}
  });

  // Early return if disabled
  if (!window.enableFooterBanners) {
    console.log("Footer banners disabled");
    return;
  }

  // Find footer element
  const footer = document.querySelector('footer');
  if (!footer) {
    console.error("Footer not found");
    return;
  }

  // Remove existing banner if present
  const existingBanner = document.querySelector('.footer-banners');
  if (existingBanner) {
    existingBanner.remove();
  }

  // Create footer banner container
  const footerBanner = document.createElement('div');
  footerBanner.classList.add('footer-banners');
  
  // Build banner content with proper Liquid syntax
  footerBanner.innerHTML = `
    <div class="footer-banner-content">
      {% if payment_processor_images != blank %}
        <div class="payment-processors">
          <h4>אמצעי תשלום</h4>
          <div class="image-container">
            {{ payment_processor_images }}
          </div>
        </div>
      {% endif %}
      
      {% if payment_features_images != blank and block.settings.enable_footer_banners %}
        <div class="payment-features">
          <div class="image-container">
            {{ payment_features_images }}
          </div>
        </div>
      {% endif %}
      
      <div class="shipping-warranty">
        {% if shop.metafields.custom.shipping_option.value != blank %}
          <p>משלוח: {{ shop.metafields.custom.shipping_option.value }}</p>
        {% endif %}
        {% if shop.metafields.custom.warranty_days.value != blank %}
          <p>אחריות: {{ shop.metafields.custom.warranty_days.value }} ימים</p>
        {% endif %}
      </div>
    </div>
  `;

  // Add styles
  const styles = `
    <style>
      .footer-banners {
        width: 100%;
        padding: 20px;
        margin-top: 20px;
        text-align: center;
        background: transparent;
      }
      
      .footer-banner-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        gap: 20px;
      }
      
      .payment-processors h4 {
        margin-bottom: 10px;
        font-weight: 600;
      }
      
      .image-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
        margin: 10px 0;
      }
      
      .image-container img {
        max-width: 50px;
        height: auto;
        margin: 5px;
      }
      
      .shipping-warranty {
        font-weight: 500;
        margin-top: 10px;
      }
      
      .shipping-warranty p {
        margin: 5px 0;
      }
    </style>
  `;
  
  // Insert styles and banner
  footerBanner.insertAdjacentHTML('beforeend', styles);
  footer.insertAdjacentElement('afterbegin', footerBanner);
  
  console.log("Footer banner added successfully");
}


      // Set initial states
      setRTL({{ block.settings.enable_rtl }});
      updateBuyNowText();
      setAlternativeFont({{ block.settings.enable_alternative_font }});
      displayFooterBanners(); // Call to display footer banners
      
      // Update WhatsApp visibility based on setting
      const whatsappButton = document.querySelector('.whatsapp-button');
      if (whatsappButton) {
        whatsappButton.style.display = enableWhatsApp ? 'flex' : 'none';
      }

      // Listen for changes from the Shopify Theme Editor
      document.addEventListener('shopify:block:select', function (event) {
        if (event.detail.blockId === {{ block.id | json }}) {
          setRTL({{ block.settings.enable_rtl }});
          updateBuyNowText();
          setAlternativeFont({{ block.settings.enable_alternative_font }});
          displayFooterBanners(); 
          if (whatsappButton) {
            whatsappButton.style.display = enableWhatsApp ? 'flex' : 'none';
          }
        }
      });
    })();
  });

  // Add debug logging
  console.log('WhatsApp Settings:', {
    enabled: {{ settings.enable_whatsapp }},
    phone: "{{ whatsapp_phone }}",
    widgetEnabled: {{ whatsapp_widget_enabled }},
    showSimpleButton: true // This should be determined by logic
  });

  // Check if simple button exists and log its state
  const whatsappButton = document.querySelector('.whatsapp-widget');
  console.log('WhatsApp Button Element:', whatsappButton);
  console.log('WhatsApp Button Display:', whatsappButton ? getComputedStyle(whatsappButton).display : 'Element not found');
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('WhatsApp Debug:', {
      blockSettingsEnabled: {{ block.settings.enable_whatsapp | json }},
      settingsEnabled: {{ settings.enable_whatsapp | default: false | json }},
      whatsappPhone: '{{ whatsapp_phone }}',
      showSimpleButton: {{ show_simple_button | json }},
      widgetEnabled: {{ whatsapp_widget_enabled | json }},
      style: '{{ whatsapp_style }}'
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
  const widget = document.querySelector('.whatsapp-widget-container');
  const closeButton = document.querySelector('.whatsapp-close-button');
  
  if (widget && closeButton) {
    closeButton.addEventListener('click', function() {
      widget.classList.add('hidden');
      // Store the state in localStorage
      localStorage.setItem('whatsappWidgetHidden', 'true');
      
      // Show widget again after 24 hours
      setTimeout(() => {
        widget.classList.remove('hidden');
        localStorage.removeItem('whatsappWidgetHidden');
      }, 24 * 60 * 60 * 1000);
    });
    
    // Check if widget was previously hidden
    if (localStorage.getItem('whatsappWidgetHidden')) {
      widget.classList.add('hidden');
    }
  }
});
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Debug initialization
    const widget = document.querySelector('.whatsapp-widget');
    console.log('Widget initialization:', {
      widget: widget,
      display: widget ? getComputedStyle(widget).display : 'not found',
      visibility: widget ? getComputedStyle(widget).visibility : 'not found',
      opacity: widget ? getComputedStyle(widget).opacity : 'not found',
      zIndex: widget ? getComputedStyle(widget).zIndex : 'not found',
      position: widget ? getComputedStyle(widget).position : 'not found'
    });

    // Force widget display
    if (widget) {
      widget.style.cssText = `
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        position: fixed !important;
        z-index: 9999 !important;
        bottom: 20px !important;
        right: 20px !important;
      `;
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Debug WhatsApp initialization
    const debug = {
      settings: {
        blockEnabled: {{ block.settings.enable_whatsapp | json }},
        widgetEnabled: {{ whatsapp_widget_enabled | json }},
        phone: '{{ whatsapp_phone }}',
        style: '{{ whatsapp_style }}'
      },
      elements: {}
    };

    // Check widget elements
    const elements = [
      '.whatsapp-widget',
      '.whatsapp-floating-widget',
      '.whatsapp-button'
    ];

    elements.forEach(selector => {
      const element = document.querySelector(selector);
      if (element) {
        debug.elements[selector] = {
          display: getComputedStyle(element).display,
          visibility: getComputedStyle(element).visibility,
          opacity: getComputedStyle(element).opacity,
          zIndex: getComputedStyle(element).zIndex,
          position: getComputedStyle(element).position
        };
      } else {
        debug.elements[selector] = 'Not found';
      }
    });

    console.group('WhatsApp Widget Debug');
    console.log('Settings:', debug.settings);
    console.log('Elements:', debug.elements);
    console.groupEnd();
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
  // Initialize all features
  setRTL({{ block.settings.enable_rtl }});
  updateBuyNowText();
  displayFooterBanners();

  // Add mutation observer for dynamic content
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.addedNodes.length) {
        updateBuyNowText(); // Update buy now text when new nodes are added
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true
  });

  // Debug logging
  console.log('Features Initialized:', {
    rtlEnabled: {{ block.settings.enable_rtl }},
    buyNowTextEnabled: {{ block.settings.enable_buy_now_text }},
    footerBannersEnabled: {{ block.settings.enable_footer_banners }},
    buyNowText: {{ buyNowText | json }},
    currentDirection: document.documentElement.getAttribute('dir')
  });
});
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
  const initializeWhatsApp = () => {
    const widgetEnabled = {{ whatsapp_widget_enabled | json }};
    const whatsappPhone = '{{ whatsapp_phone }}';
    const position = '{{ whatsapp_position }}'; // Use the assigned variable
    
    if (widgetEnabled && whatsappPhone) {
      // Force show the widget
      const widget = document.querySelector('.whatsapp-floating-widget');
      const simpleButton = document.querySelector('.whatsapp-widget');
      
      if (widget) {
        widget.style.cssText = `
          position: fixed !important;
          bottom: 20px !important;
          ${position}: 20px !important;
          z-index: 999999 !important;
          display: block !important;
          visibility: visible !important;
          opacity: 1 !important;
          pointer-events: auto !important;
          width: 300px;
          max-width: 100%;
        `;
      }
      
      if (simpleButton) {
        simpleButton.style.cssText = `
          position: fixed !important;
          bottom: 20px !important;
          ${position}: 20px !important;
          z-index: 999999 !important;
          display: flex !important;
          visibility: visible !important;
          opacity: 1 !important;
          pointer-events: auto !important;
        `;
      }
    }
  };

  // Initial call
  initializeWhatsApp();
  
  // Re-run after a short delay to ensure all elements are loaded
  setTimeout(initializeWhatsApp, 1000);
});
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Add initialization code here
    initializeWhatsApp();
    initializeFeatures();
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
  const scripts = document.getElementsByTagName('script');
  console.log('Total scripts:', scripts.length);
  
  // Verify WhatsApp initialization
  const whatsappElements = {
    widget: document.querySelector('.whatsapp-floating-widget'),
    button: document.querySelector('.whatsapp-button'),
    container: document.querySelector('.whatsapp-widget-container')
  };
  
  console.log('WhatsApp Elements Status:', whatsappElements);
});
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('WhatsApp Debug:', {
      position: '{{ whatsapp_position }}',
      widgetEnabled: {{ whatsapp_widget_enabled | json }},
      phone: '{{ whatsapp_phone }}',
      elements: {
        widget: document.querySelector('.whatsapp-floating-widget'),
        button: document.querySelector('.whatsapp-widget')
      }
    });
  });
</script>

<style>
  html[dir="rtl"],
  body[dir="rtl"] {
    direction: rtl !important;
    text-align: right !important;
  }
   
  body.custom-font-applied,
  body.custom-font-applied *:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab) {
    font-family: var(--custom-font, 'Rubik'), sans-serif !important;
  }

  /* Apply font to specific elements that might be overriding our styles */
  body.custom-font-applied h1,
  body.custom-font-applied h2,
  body.custom-font-applied h3,
  body.custom-font-applied h4,
  body.custom-font-applied h5,
  body.custom-font-applied h6,
  body.custom-font-applied p,
  body.custom-font-applied span,
  body.custom-font-applied a,
  body.custom-font-applied button,
  body.custom-font-applied input,
  body.custom-font-applied select,
  body.custom-font-applied textarea {
    font-family: var(--custom-font, 'Rubik'), sans-serif !important;
  }

  /* Add styles for footer banners */
  .footer-banners {
  background-color: transparent;
  padding: 20px;
  text-align: center;
  width: 100vw; /* Ensures it takes up the full width */
  display: block; /* Ensures it's a block element */
  clear: both; /* Forces other elements to appear below */
}


  .footer-banners img {
    max-width: 50px;
    margin: 0 10px;
  }

  .footer__content-bottom-wrapper{
    flex-direction: column-reverse;
    align-items: center;
    justify-content: center;
  }

  .payment-section {
    padding: 16px;
    border-radius: 10px;
    {% if payment_background == 'transparent' %}
      background: transparent;
    {% else %}
      background: white;
    {% endif %}
  }
</style>

<style>
  /* WhatsApp Styles */
  .whatsapp-widget {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    pointer-events: auto !important;
    border-radius: 8px;
  }

  .whatsapp-widget-header {
    padding: 16px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
  }
  .whatsapp-button {
    display: flex !important;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: transform 0.3s ease;
    border-radius: 10px;
    padding: 8px 16px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    min-width: 160px;
    text-decoration: none;
  }

  /* RTL Styles */
  html[dir="rtl"],
  body[dir="rtl"] {
    direction: rtl !important;
    text-align: right !important;
  }

  /* Footer Banner Styles */
  .footer-banners {
    width: 100%;
    padding: 20px;
    margin-top: 20px;
    text-align: center;
    background: transparent;
  }

  .footer-banner-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  /* Rest of your existing styles... */
</style>

<script>
// Single WhatsApp initialization function
function initializeWhatsApp() {
  const config = {
    enabled: {{ block.settings.enable_whatsapp | json }},
    widgetEnabled: {{ whatsapp_widget_enabled | json }},
    phone: '{{ whatsapp_phone }}',
    position: '{{ whatsapp_position }}',
    style: '{{ whatsapp_style }}'
  };

  // Early exit if WhatsApp is not enabled
  if (!config.enabled) {
    console.log('WhatsApp disabled');
    return;
  }

  console.log('Initializing WhatsApp with config:', config);

  // Handle floating widget
  const floatingWidget = document.querySelector('.whatsapp-floating-widget');
  if (config.widgetEnabled && floatingWidget) {
    // Force show the widget with important flags
    floatingWidget.style.cssText = `
      position: fixed !important;
      bottom: 20px !important;
      ${config.position}: 20px !important;
      z-index: 999999 !important;
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
      pointer-events: auto !important;
      transform: none !important;
      width: 300px;
      max-width: 100%;
    `;

    // Ensure the container is also visible
    const widgetContainer = floatingWidget.querySelector('.whatsapp-widget-container');
    if (widgetContainer) {
      widgetContainer.style.cssText = `
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        transform: none !important;
        width: 100% !important;
        height: auto !important;
      `;
    }
  }

  // Log visibility state
  console.log('WhatsApp Widget State:', {
    widget: floatingWidget,
    display: floatingWidget ? getComputedStyle(floatingWidget).display : 'not found',
    visibility: floatingWidget ? getComputedStyle(floatingWidget).visibility : 'not found',
    opacity: floatingWidget ? getComputedStyle(floatingWidget).opacity : 'not found',
    zIndex: floatingWidget ? getComputedStyle(floatingWidget).zIndex : 'not found'
  });
}

// Call initialization on DOMContentLoaded and after a delay
document.addEventListener('DOMContentLoaded', function() {
  initializeWhatsApp();
  // Add a delayed call to handle any dynamic loading issues
  setTimeout(initializeWhatsApp, 1000);
});

// Add a CSS fix to ensure widget visibility
const styleTag = document.createElement('style');
styleTag.textContent = `
  .whatsapp-floating-widget {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    position: fixed !important;
    z-index: 999999 !important;
    pointer-events: auto !important;
  }

  .whatsapp-widget-container {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    transform: none !important;
  }

  .whatsapp-widget-container[data-state="minimized"] {
    height: auto !important;
  }

  .whatsapp-widget-container[data-state="minimized"] .whatsapp-widget-body {
    display: none !important;
  }
`;
document.head.appendChild(styleTag);
</script>

<script>
// Define all initialization functions
function initializeFeatures() {
  // RTL initialization
  setRTL({{ block.settings.enable_rtl }});
  
  // Buy Now text
  updateBuyNowText();
  
  // Footer banners
  displayFooterBanners();
  
  // WhatsApp initialization
  if (window.initializeWhatsApp) {
    window.initializeWhatsApp();
  }
  
  // Debug logging
  console.log('Features Initialized:', {
    rtlEnabled: {{ block.settings.enable_rtl }},
    buyNowTextEnabled: {{ block.settings.enable_buy_now_text }},
    footerBannersEnabled: {{ block.settings.enable_footer_banners }},
    whatsappEnabled: {{ block.settings.enable_whatsapp }},
    currentDirection: document.documentElement.getAttribute('dir')
  });
}

// Single initialization point
document.addEventListener('DOMContentLoaded', function() {
  initializeFeatures();
  
  // Add mutation observer for dynamic content
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.addedNodes.length) {
        updateBuyNowText();
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
});

// Re-initialize on Shopify Theme Editor changes
document.addEventListener('shopify:block:select', function(event) {
  if (event.detail.blockId === {{ block.id | json }}) {
    initializeFeatures();
  }
});
</script>

<script>
// Add to your existing JavaScript
document.addEventListener('DOMContentLoaded', function() {
  const container = document.querySelector('.whatsapp-widget-container');
  const minimizeButton = document.querySelector('.whatsapp-minimize-button');
  const closeButton = document.querySelector('.whatsapp-close-button');

  if (minimizeButton) {
    minimizeButton.addEventListener('click', function() {
      const isMinimized = container.getAttribute('data-state') === 'minimized';
      container.setAttribute('data-state', isMinimized ? 'expanded' : 'minimized');
      
      // Store state in localStorage
      localStorage.setItem('whatsappWidgetState', isMinimized ? 'expanded' : 'minimized');
    });
  }

  if (closeButton) {
    closeButton.addEventListener('click', function() {
      container.style.display = 'none';
      // Store closed state in localStorage
      localStorage.setItem('whatsappWidgetClosed', 'true');
      
      // Show widget again after 24 hours
      setTimeout(() => {
        container.style.display = 'block';
        localStorage.removeItem('whatsappWidgetClosed');
      }, 24 * 60 * 60 * 1000);
    });
  }

  // Restore previous state on page load
  const savedState = localStorage.getItem('whatsappWidgetState');
  const isClosed = localStorage.getItem('whatsappWidgetClosed');
  
  if (savedState === 'minimized') {
    container.setAttribute('data-state', 'minimized');
  }
  
  if (isClosed === 'true') {
    container.style.display = 'none';
  }
});
</script>

{% schema %}
{
  "name": "Hebrew App",
  "target": "body",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_rtl",
      "label": "Enable RTL",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_buy_now_text",
      "label": "Enable Custom Buy Now Text",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_alternative_font",
      "label": "Enable Alternative Font",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_footer_banners",
      "label": "Enable Footer Banners",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_whatsapp",
      "label": "Enable WhatsApp Button",
      "default": false
    }
  ]
}
{% endschema %}